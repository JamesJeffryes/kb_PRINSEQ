# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_PRINSEQ(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def execReadLibraryPRINSEQ(self, input_params, context=None):
        """
        :param input_params: instance of type "inputPRINSEQ" (execPRINSEQ and
           execReadLibraryPRINSEQ input input_reads_ref : may be
           KBaseFile.PairedEndLibrary or KBaseFile.SingleEndLibrary output_ws
           : workspace to write to output_reads_name : obj_name to create
           lc_method : Low complexity method - value must be "dust" or
           "entropy" lc_entropy_threshold : Low complexity threshold - Value
           must be an integer between 0 and 100. Note a higher
           lc_entropy_threshold in entropy is more stringent.
           lc_dust_threshold : Low complexity threshold - Value must be an
           integer between 0 and 100. Note a lower lc_entropy_threshold is
           less stringent with dust) -> structure: parameter
           "input_reads_ref" of type "data_obj_ref", parameter "output_ws" of
           type "workspace_name" (Common Types), parameter
           "output_reads_name" of type "data_obj_name", parameter "lc_method"
           of String, parameter "lc_entropy_threshold" of Long, parameter
           "lc_dust_threshold" of Long
        :returns: instance of type "outputReadLibraryExecPRINSEQ" ->
           structure: parameter "output_filtered_ref" of type "data_obj_ref",
           parameter "output_unpaired_fwd_ref" of type "data_obj_ref",
           parameter "output_unpaired_rev_ref" of type "data_obj_ref",
           parameter "report" of String
        """
        return self._client.call_method(
            'kb_PRINSEQ.execReadLibraryPRINSEQ',
            [input_params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_PRINSEQ.status',
                                        [], self._service_ver, context)
